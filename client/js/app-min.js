export class Dijkstra{constructor(t){this.graph=t,this.nodes=t.length,this.distance=new Array(this.nodes),this.visited=new Array(this.nodes).fill(!1)}findShortestPath(t){for(let t=0;t<this.nodes;t++)this.distance[t]=1/0;this.distance[t.node]=0;for(let t=0;t<this.nodes-1;t++){const t=this.getMinDistNode();this.visited[t.node]=!0;for(let s=0;s<this.nodes;s++)!this.visited[s]&&0!==this.graph[t][s]&&this.distance[t]!==1/0&&this.distance[t]+this.graph[t]<this.distance[s]&&(this.distance[s]=this.distance[t]+this.graph[t][s])}return this.distance}getMinDistNode(){let t=1/0;for(let s=0;s<this.nodes;s++)!visited[s]&&this.distance[s]<=t&&(t=this.distance[s],minDistNode=s);return minDistNode}}const d=new Dijkstra;d.findShortestPath();